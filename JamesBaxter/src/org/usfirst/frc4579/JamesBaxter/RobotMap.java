// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.JamesBaxter;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainflMotor;
    public static SpeedController driveTrainfrMotor;
    public static SpeedController driveTrainrlMotor;
    public static SpeedController driveTrainrrMotor;
    public static AnalogGyro driveTrainrobotGyro;
    public static Relay shootershootSole;
    public static DigitalInput aimerraisedLimit;
    public static DigitalInput aimerloweredLimit;
    public static SpeedController aimerliftMotor;
    public static AnalogPotentiometer aimerarmPot;
    public static SpeedController loaderloadMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainflMotor = new Talon(0);
        LiveWindow.addActuator("driveTrain", "flMotor", (Talon) driveTrainflMotor);
        
        driveTrainfrMotor = new Talon(1);
        LiveWindow.addActuator("driveTrain", "frMotor", (Talon) driveTrainfrMotor);
        
        driveTrainrlMotor = new Talon(2);
        LiveWindow.addActuator("driveTrain", "rlMotor", (Talon) driveTrainrlMotor);
        
        driveTrainrrMotor = new Talon(3);
        LiveWindow.addActuator("driveTrain", "rrMotor", (Talon) driveTrainrrMotor);
        
        driveTrainrobotGyro = new AnalogGyro(0);
        LiveWindow.addSensor("driveTrain", "robotGyro", driveTrainrobotGyro);
        driveTrainrobotGyro.setSensitivity(0.007);
        shootershootSole = new Relay(2);
        LiveWindow.addActuator("shooter", "shootSole", shootershootSole);
        
        aimerraisedLimit = new DigitalInput(2);
        LiveWindow.addSensor("aimer", "raisedLimit", aimerraisedLimit);
        
        aimerloweredLimit = new DigitalInput(7);
        LiveWindow.addSensor("aimer", "loweredLimit", aimerloweredLimit);
        
        aimerliftMotor = new Talon(4);
        LiveWindow.addActuator("aimer", "liftMotor", (Talon) aimerliftMotor);
        
        aimerarmPot = new AnalogPotentiometer(1, 1.0, 0.0);
        LiveWindow.addSensor("aimer", "armPot", aimerarmPot);
        
        loaderloadMotor = new Talon(5);
        LiveWindow.addActuator("loader", "loadMotor", (Talon) loaderloadMotor);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
